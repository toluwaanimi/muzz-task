definitions:
  controllers.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  models.Gender:
    enum:
    - male
    - female
    - non-binary
    type: string
    x-enum-varnames:
    - Male
    - Female
    - NonBinary
  models.LoginPayload:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.RegistrationResponse:
    properties:
      age:
        type: integer
      email:
        type: string
      gender:
        $ref: '#/definitions/models.Gender'
      id:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  models.SwipePayload:
    properties:
      interested:
        type: boolean
      user_id:
        type: string
    type: object
  models.SwipeResponse:
    properties:
      match_id:
        type: string
      matched:
        type: boolean
    type: object
  models.User:
    properties:
      age:
        type: integer
      attractiveness:
        type: integer
      bio:
        type: string
      date_of_birth:
        type: string
      dating_intentions:
        type: string
      distance:
        type: number
      drinking:
        type: string
      drugs:
        type: string
      email:
        type: string
      ethnicity:
        type: string
      gender:
        $ref: '#/definitions/models.Gender'
      height:
        type: number
      id:
        type: string
      kids:
        type: integer
      location:
        items:
          type: number
        type: array
      name:
        type: string
      occupation:
        type: string
      pets:
        type: string
      religion:
        type: string
      sexuality:
        type: string
      smoking:
        type: string
      swipe_count:
        type: integer
    type: object
info:
  contact: {}
paths:
  /:
    get:
      consumes:
      - application/json
      description: Welcome to the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Welcome to the API
      tags:
      - home
  /discover:
    get:
      consumes:
      - application/json
      description: Discover users
      parameters:
      - default: bearer
        description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Minimum Age
        in: query
        name: min_age
        type: integer
      - description: Maximum Age
        in: query
        name: max_age
        type: integer
      - description: Maximum Distance
        in: query
        name: max_distance
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerToken: []
      summary: Discover users
      tags:
      - discover
  /login:
    post:
      consumes:
      - application/json
      description: Login a user with email and password
      parameters:
      - description: Login Payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Login a user with email and password
      tags:
      - user
  /user:
    get:
      consumes:
      - application/json
      description: Get a user
      parameters:
      - default: bearer
        description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerToken: []
      summary: Get a user
      tags:
      - user
  /user/create:
    post:
      consumes:
      - application/json
      description: Generate a random user and return the user details
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/models.RegistrationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Create a random user
      tags:
      - user
swagger: "2.0"
